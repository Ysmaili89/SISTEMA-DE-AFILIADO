# Una configuración genérica de base de datos única.

[alembic]
# ruta a los scripts de migración.
# esta es típicamente una ruta dada en POSIX (por ejemplo, barras diagonales)
# formato, en relación con el token %(here)s que se refiere a la ubicación de este
# archivo ini
script_location = %(here)s/alembic

# plantilla utilizada para generar nombres de archivos de migración; El valor predeterminado es %%(rev)s_%%(slug)s
# Descomente la línea a continuación si desea que los archivos se antepongan con fecha y hora
# ver https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# para todos los tokens disponibles
# file_template = %%(año)d_%%(mes).2d_%%(día).2d_%%(hora).2d%%(minuto).2d-%%(rev)s_%%(slug)s

# sys.path path, se antepondrá a sys.path si está presente.
# por defecto es el directorio de trabajo actual. Para múltiples rutas, el separador de rutas
# se define con "path_separator" a continuación.
prepend_sys_path = .


# zona horaria que se utilizará al representar la fecha dentro del archivo de migración
# así como el nombre del archivo.
# Si se especifica, requiere la biblioteca python>=3.9 o backports.zoneinfo y la biblioteca tzdata.
# Cualquier deps requerido puede instalarse agregando 'alembic[tz]' a los requisitos de pip
# el valor de la cadena se pasa a ZoneInfo()
# dejar en blanco para la hora local
# timezone =

# longitud máxima de caracteres para aplicar al campo "slug"
# truncate_slug_length = 40

# establecido en 'true' para ejecutar el entorno durante
# el comando 'revision', independientemente de autogenerar
# revision_environment = false

# establecer en 'true' para permitir archivos .pyc y .pyo sin
# un archivo de .py fuente que se detectará como revisiones en el
# Directorio versions/
# sourceless = false

# especificación de ubicación de la versión; Esto tiene por defecto
# a <script_location>/versions. Cuando se utilizan varias versiones
# directorios, las revisiones iniciales deben especificarse con --version-path.
# El separador de ruta utilizado aquí debe ser el separador especificado por "path_separator"
# a continuación.
# version_locations = %(here)s/bar:%(here)s/bat:%(here)s/alembic/versions

# path_separator; Esto indica qué carácter se usa para dividir las listas de archivos
# rutas, incluidas version_locations y prepend_sys_path dentro de configparser
# archivos como alembic.ini.
# El valor predeterminado que se representa en los nuevos archivos alembic.ini es "os", que usa os.pathsep
# para proporcionar división de rutas dependiente del sistema operativo.
#
# Tenga en cuenta que para admitir archivos alembic.ini heredados, este valor predeterminado NO
# tiene lugar si path_separator no está presente en alembic.ini. Si este
# se omite por completo, la lógica de reserva es la siguiente:
#
# 1. El análisis de la opción version_locations vuelve a usar el legado
#    tecla "version_path_separator", que si está ausente, vuelve al legado
#    comportamiento de dividir en espacios y/o comas.
# 2. El análisis de la opción prepend_sys_path vuelve al legado
#    comportamiento de dividir en espacios, comas o dos puntos.
#
# Los valores válidos para path_separator son:
#
# path_separator = :
# path_separator = ;
# path_separator = space
# path_separator = newline
#
# Utilice os.pathsep. Configuración predeterminada utilizada para nuevos proyectos.
path_separator = ;
# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# database URL.  This is consumed by the user-maintained env.py script only.
# other means of configuring database URLs may be customized within the env.py
# file.
sqlalchemy.url = postgresql://sistema_app_user:c3jOPCDxjyU9JoM5GqCvrrBdaoCl7iwF@dpg-d277nm95pdvs73ck4u1g-a.oregon-postgres.render.com/sistema_app


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# hooks = ruff
# ruff.type = module
# ruff.module = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Alternatively, use the exec runner to execute a binary found on your PATH
# hooks = ruff
# ruff.type = exec
# ruff.executable = ruff
# ruff.options = check --fix REVISION_SCRIPT_FILENAME

# Logging configuration.  This is also consumed by the user-maintained
# env.py script only.
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S